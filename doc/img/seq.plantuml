@startuml
' seq
participant "Client" as c
participant "Docker API" as s


' get authUri
c -> s ++: ""GET <color:blue>${registryUri}</color>/v2/""
return ""401 Unauthorized""\n""www-authenticate: Bearer realm="<color:blue>${authUri}</color>",service="<color:blue>${service}</color>"""
' get token
c -> s ++: ""GET <color:blue>${authUri}</color>?service=<color:blue>${service}</color>&scope=repository:<color:blue>${image}</color>:pull""
note over c
{
  "token": "",
  "access_token": "",
  "expires_in": 300,
  "issued_at": ""
}
end note
return
c -> c: Extract access_token from response
' manifest
group Image Manifest
  c -> s ++: ""GET <color:blue>${registryUri}</color>/v2/<color:blue>${image}</color>/manifests/<color:blue>${tag}</color>""\n""Authorization: Bearer <color:blue>${access_token}</color>""
  note over c
  {
    "schemaVersion": 2,
    "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
    "config": {
      "mediaType": "application/vnd.docker.container.image.v1+json",
      "size": 13773,
      "digest": "sha256:4bb03..."
    },
    "layers": [
      {
        "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
        "size": 3623807,
        "digest": "sha256:43c426..."
      },
      ...
    ]
  }
  end note
  return
end group
' image config
group Image Config
  c -> s ++: ""GET <color:blue>${registryUri}</color>/v2/<color:blue>${image}</color>/blobs/<color:blue>${config.digest}</color>""\n""Accept: <color:blue>${config.mediaType}</color>""\n""Authorization: Bearer <color:blue>${access_token}</color>""
  note over c
  {
    "config": {},
    "history": [],
    "rootfs": {
      "type": "layers",
      "diff_ids": [
        "sha256:63ca1fbb43ae5034640e5e6cb3e083e05c290072c5366fcaa9d62435a4cced85",
        ...
      ]
    }
  }
  end note
  return
end group

note over c
build layerIds[] array from rootfs.diff_ids removing ""sha256:"" prefix
end note

' layers
loop For each layer in manifest indexed by i
  c -> c: Get currentLayerId = layerIds[i]
  c -> c: Create folder ""<color:blue>${currentLayerId}</color>"" under which all further files will be written
  c -> c: Create ""VERSION"" file with value 1.0
  c -> c: Create ""json"" file
  note over c
  {
    "id": "<color:blue>${currentLayerId}</color>",
    "parent": "<color:blue>${previousLayerId}</color>"
  }
  end note
  c -> s ++: ""GET <color:blue>${registryUri}</color>/v2/<color:blue>${image}</color>/blobs/<color:blue>${config.digest}</color>""\n""Accept: <color:blue>${config.mediaType}</color>""\n""Authorization: Bearer <color:blue>${access_token}</color>""
  return
  c -> c: Gunzip response and save to ""layer.tar""
end loop
@enduml
